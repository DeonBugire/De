// 1. Создать класс "Ребенок", у каждого ребенка есть имя и возраст,
// а еще должен быть метод "день рождения", после которого возраст увеличивается.
// 2. Создать класс "Школьный автобус".
// У автобуса есть вместимость (сколько детей он может перевозить)
// и методы - посадить ребенка в автобус (если не влазит - ну не знаю, напечатать сообщение)
// и высадить всех детей заданного возраста - вернуть список детей, у кого возраст равен такому-то.
// 3. Написать демо-приложение, которое играется с этими классами
// сажает/высаживает из автобуса, отмечает день рождения и т.д.

fun main() {
    val bob: Kid = Kid("Bob", 10)
    val tom: Kid = Kid("Tom", 3)
    val maria: Kid = Kid("Maria", 3)
    val schoolBus: SchoolBus = SchoolBus(3)
    val allKids = listOf(bob, tom, maria)
    bob.birthday()
    val kidName: String = readln()
    println(kidName)
    schoolBus.putOnTheBus(getKidByName(kidName, allKids))
    println("Which age do we drop off the bus?")
    val ageOfDrop: Int = readln().toInt()
    schoolBus.getOutTheBus(ageOfDrop)
}

class Kid(val name: String, var age: Int) {
    fun birthday(): Unit {
        age += 1
        println("Happy Birthday, $name. Now you are $age years old")
    }
}

class SchoolBus(val capacity: Int) {
    val kids: MutableSet<Kid> = mutableSetOf()
    fun putOnTheBus(kid: Kid?): Unit {
        if (capacity > kids.size) {
            if (kid != null) {
                kids.add(kid)
                println(kids.size)
            } else
                println("Sorry, this kid doesn't exist")
        } else
            println("Sorry, the bus is full")
    }

    fun getOutTheBus(ageOfDrop: Int): Set<Kid> {
        val kidToDeparture = kids.filter { it.age == ageOfDrop }.toSet()
        kids.removeAll(kidToDeparture)
        println(kids.size)
        return kidToDeparture
    }
}

fun getKidByName(name: String, listOfKids: List<Kid>): Kid? {
    val kid = listOfKids.find { it.name == name }
    return kid
}
